<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Grayton Ward</title><subtitle>A personal blog for documenting my experiences and experiments in homelabing</subtitle> <updated>2023-03-06T15:30:22-05:00</updated> <author> <name>Grayton Ward</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Grayton Ward </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Creating Unit Tests in Go</title><link href="/posts/creating-unit-tests-golang/" rel="alternate" type="text/html" title="Creating Unit Tests in Go" /><published>2023-03-06T00:00:00-05:00</published> <updated>2023-03-06T15:30:03-05:00</updated> <id>/posts/creating-unit-tests-golang/</id> <content src="/posts/creating-unit-tests-golang/" /> <author> <name>Grayton Ward</name> </author> <category term="Programming" /> <category term="Golang" /> <summary> Writing unit tests for you functions is an important step in ensuring that the code you have written is creating the output you are expecting. I’ll go over a few different functions in go and how you can go about writing good unit tests for them using go recommended table based testing method. Simple Pure Functions For pure functions unit testing is a breeze due to pure functions properties ... </summary> </entry> <entry><title>Understanding Golang Pointers</title><link href="/posts/golang-pointers/" rel="alternate" type="text/html" title="Understanding Golang Pointers" /><published>2023-02-20T00:00:00-05:00</published> <updated>2023-02-21T08:03:10-05:00</updated> <id>/posts/golang-pointers/</id> <content src="/posts/golang-pointers/" /> <author> <name>Grayton Ward</name> </author> <category term="Programming" /> <category term="Golang" /> <summary> Even if you are familiar with a language that has pointers like C pointers in go may still give you some trouble. This short guide will assume you have no previous knowledge of pointers to give you a ground up understanding of what they are and how they are used in golang. What is a pointer In programming one of the most common things you do is create variables. When you do this the computer ... </summary> </entry> <entry><title>Automating CloudInit Templates in Proxmox</title><link href="/posts/setting-up-cloudinit/" rel="alternate" type="text/html" title="Automating CloudInit Templates in Proxmox" /><published>2022-08-26T00:00:00-04:00</published> <updated>2022-08-26T00:00:00-04:00</updated> <id>/posts/setting-up-cloudinit/</id> <content src="/posts/setting-up-cloudinit/" /> <author> <name>Grayton Ward</name> </author> <category term="Homelab" /> <category term="Ansible" /> <category term="HomelabBible" /> <summary> Automating CloudInit Templates in Proxmox Continuing from my last post on setting up my homelab bible the next thing I want to do is make it easy for me to spin up new vms in my environment from a known good state. CloudInit is a technology that we can use to accomplish just this and is supported by proxmox. With the theme of this homelab bible series being automating everything I am going t... </summary> </entry> <entry><title>Starting My Homelab Bible</title><link href="/posts/starting-the-homelab-bible/" rel="alternate" type="text/html" title="Starting My Homelab Bible" /><published>2022-08-18T00:00:00-04:00</published> <updated>2022-08-26T02:00:44-04:00</updated> <id>/posts/starting-the-homelab-bible/</id> <content src="/posts/starting-the-homelab-bible/" /> <author> <name>Grayton Ward</name> </author> <category term="Homelab" /> <category term="Ansible" /> <category term="HomelabBible" /> <summary> Starting My Homelab Bible This will server as the start of my journey to create a set of ansible playbooks and tasks to be able to do all the things in my homelab from ansible. The other goal is that if my homelab blew up I could use these playbooks to recreate the entire lab with no manual steps. There are a few assumptions I am making with this set of playbooks if you want to use them for ... </summary> </entry> </feed>
